{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is CME CloudPurchase? Overview CME CloudPurchase is a Unity extension for server-side processing of in-game payments in your AWS cloud environment. Its key difference from similar systems is complete control and significant cost savings thanks to a cutting-edge approach to cloud deployment in AWS . Sounds intriguing yet complicated? We have prepared step-by-step guide on creating and setting up a new account, and the process of deploying cloud infrastructure can be done from the Unity interface in just a couple of clicks. As a result, you get a server solution deployed in your own cloud, enjoy unlimited opportunities for extended functionality, and don't need to get a yet-another-weird subscription. Sections CME CloudPurchase features How CME CloudPurchase works CME CloudPurchase pricing CME CloudPurchase features Verification of payments' correctness Test payment identification Tracking payment history Managing deployment environments Extension and modification Verification of payments' correctness CME CloudPurchase performs verification using special APIs for each of the supported platforms to more reliably confirm the correctness of in-game purchases. CME CloudPurchase currently supports the Google Play Store and Apple App Store . See the Getting Started / Configuring Stores Integrations section in the User Guide for more information on platform integration. Test payment identification CME CloudPurchase helps to separate test payments and, if possible, repeat purchases for informed decision-making. See the Making Validation Requests section in the Developer Guide for more details on payment verification and operation mechanics. Tracking payment history Thanks to a unique system of logging and metrics in Amazon CloudWatch , CME CloudPurchase allows you to monitor payments in real time and upload the entire payment history for further analysis. See the Usage Statistics and Monitoring section in the User Guide for more information on cloud application usage statistics and monitoring. Managing deployment environments CME CloudPurchase allows you to switch between the test and main operating environments directly from the Unity Editor to easily check your cloud application's configuration. See the Managing Cloud Environments section of the Developer Guide for more information on cloud deployment. Extension and modification Almost all of the logic in Assets/CME is extensively documented and available for adaptation for seamless integration with your application's logic. The cloud logic is arranged in'Cloud/Cloud.sln', a special solution in the projects. 'CME.CloudPurchase/CME.CloudPurchase.csproj' containing the runtime logic of the server application. 'CME.CloudDefinition/CME.CloudDefinition.csproj' containing the logic for deploying a cloud infrastructure. How CME CloudPurchase works The extension consists of two elements: Ready-to-use C# code for client and server payment processing; Cloud application deployment tools built into Unity Editor . Each payment in the purchase scenario is processed by sending a request to the cloud application deployed in the chosen environment . The request is made using the client library integrated into the game. The environment is selected in the special Unity Editor extension window before building or running the application. Cloud application A cloud application is a set of related AWS components required for checking, storing, and monitoring payment history. Deployment environment The application is divided into named environments to enable secure testing of cloud application configurations and extensions. CME CloudPurchase pricing CME CloudPurchase uses AWS resources very efficiently and is fully compliant with the AWS Free Tier terms of use. That is why the trial version of CME CloudPurchase will be completely free for you. Should it be impossible to use AWS Free Tier , the operating cost is still highly competitive .","title":"What is CME CloudPurchase?"},{"location":"#what-is-cme-cloudpurchase","text":"","title":"What is CME CloudPurchase?"},{"location":"#overview","text":"CME CloudPurchase is a Unity extension for server-side processing of in-game payments in your AWS cloud environment. Its key difference from similar systems is complete control and significant cost savings thanks to a cutting-edge approach to cloud deployment in AWS . Sounds intriguing yet complicated? We have prepared step-by-step guide on creating and setting up a new account, and the process of deploying cloud infrastructure can be done from the Unity interface in just a couple of clicks. As a result, you get a server solution deployed in your own cloud, enjoy unlimited opportunities for extended functionality, and don't need to get a yet-another-weird subscription. Sections CME CloudPurchase features How CME CloudPurchase works CME CloudPurchase pricing","title":" Overview"},{"location":"#cme-cloudpurchase-features","text":"Verification of payments' correctness Test payment identification Tracking payment history Managing deployment environments Extension and modification","title":" CME CloudPurchase features"},{"location":"#verification-of-payments-correctness","text":"CME CloudPurchase performs verification using special APIs for each of the supported platforms to more reliably confirm the correctness of in-game purchases. CME CloudPurchase currently supports the Google Play Store and Apple App Store . See the Getting Started / Configuring Stores Integrations section in the User Guide for more information on platform integration.","title":" Verification of payments' correctness"},{"location":"#test-payment-identification","text":"CME CloudPurchase helps to separate test payments and, if possible, repeat purchases for informed decision-making. See the Making Validation Requests section in the Developer Guide for more details on payment verification and operation mechanics.","title":" Test payment identification"},{"location":"#tracking-payment-history","text":"Thanks to a unique system of logging and metrics in Amazon CloudWatch , CME CloudPurchase allows you to monitor payments in real time and upload the entire payment history for further analysis. See the Usage Statistics and Monitoring section in the User Guide for more information on cloud application usage statistics and monitoring.","title":" Tracking payment history"},{"location":"#managing-deployment-environments","text":"CME CloudPurchase allows you to switch between the test and main operating environments directly from the Unity Editor to easily check your cloud application's configuration. See the Managing Cloud Environments section of the Developer Guide for more information on cloud deployment.","title":" Managing deployment environments"},{"location":"#extension-and-modification","text":"Almost all of the logic in Assets/CME is extensively documented and available for adaptation for seamless integration with your application's logic. The cloud logic is arranged in'Cloud/Cloud.sln', a special solution in the projects. 'CME.CloudPurchase/CME.CloudPurchase.csproj' containing the runtime logic of the server application. 'CME.CloudDefinition/CME.CloudDefinition.csproj' containing the logic for deploying a cloud infrastructure.","title":" Extension and modification"},{"location":"#how-cme-cloudpurchase-works","text":"The extension consists of two elements: Ready-to-use C# code for client and server payment processing; Cloud application deployment tools built into Unity Editor . Each payment in the purchase scenario is processed by sending a request to the cloud application deployed in the chosen environment . The request is made using the client library integrated into the game. The environment is selected in the special Unity Editor extension window before building or running the application.","title":" How CME CloudPurchase works"},{"location":"#cloud-application","text":"A cloud application is a set of related AWS components required for checking, storing, and monitoring payment history.","title":"Cloud application"},{"location":"#deployment-environment","text":"The application is divided into named environments to enable secure testing of cloud application configurations and extensions.","title":"Deployment environment"},{"location":"#cme-cloudpurchase-pricing","text":"CME CloudPurchase uses AWS resources very efficiently and is fully compliant with the AWS Free Tier terms of use. That is why the trial version of CME CloudPurchase will be completely free for you. Should it be impossible to use AWS Free Tier , the operating cost is still highly competitive .","title":" CME CloudPurchase pricing"},{"location":"api_reference/CME.CloudPurchase/","text":"Namespace CME.CloudPurchase Top-level entities CloudPurchaseClient PurchaseType Store ValidationRequest ValidationResponse CloudPurchaseClient type Implements IDisposable Overview Client for validating purchases. Methods overview Name Description #ctor() constructor Default constructor Dispose() IDisposable implementation Validate(request, executionLogger) Initiates payment validation request to the cloud side of CME Cloud Purchase Methods Validate(request, executionLogger) method Parameters Name Type Description request CME.CloudPurchase.ValidationRequest Purchase details to validate executionLogger System.Action{System.String} Delegate for logging validation result Returns Task< ValidationResponse > PurchaseType enum Summary Enum of types of purchase. Values Name Value Description Unknown 0 Unknown type Paid 1 Paid through the store Test 2 Test payment Promo 3 Promo code Store enum Summary Enum of app stores Values Name Description Apple AppStore Fake For test purpose GooglePlay Google Play Store ValidationRequest type Overview Purchase info to validate Fields Name Type Description Store Store Store where the purchase was made PackageId string App Id ProductId string Product ID ReceiptData string Data with payment processing results from the store UserId string User ID Price string Price in local currency Currency string Local currency PriceUsdCents int Price in USD cents ValidationResponse type Overview Details of validation result from CME Cloud Purchase cloud side Fields Name Type Description Valid bool Payment validity flag PurchaseType PurchaseType Payment type ErrorCode string Error code from the validating platform ErrorMessage string Error description from the validating platform","title":"CME.CloudPurchase"},{"location":"api_reference/CME.CloudPurchase/#namespace-cmecloudpurchase","text":"","title":"Namespace CME.CloudPurchase"},{"location":"api_reference/CME.CloudPurchase/#top-level-entities","text":"CloudPurchaseClient PurchaseType Store ValidationRequest ValidationResponse","title":"Top-level entities"},{"location":"api_reference/CME.CloudPurchase/#cloudpurchaseclient-type","text":"","title":"CloudPurchaseClient type"},{"location":"api_reference/CME.CloudPurchase/#implements","text":"IDisposable","title":"Implements"},{"location":"api_reference/CME.CloudPurchase/#overview","text":"Client for validating purchases.","title":"Overview"},{"location":"api_reference/CME.CloudPurchase/#methods-overview","text":"Name Description #ctor() constructor Default constructor Dispose() IDisposable implementation Validate(request, executionLogger) Initiates payment validation request to the cloud side of CME Cloud Purchase","title":"Methods overview"},{"location":"api_reference/CME.CloudPurchase/#methods","text":"","title":"Methods"},{"location":"api_reference/CME.CloudPurchase/#validaterequest-executionlogger-method","text":"","title":"Validate(request, executionLogger) method"},{"location":"api_reference/CME.CloudPurchase/#parameters","text":"Name Type Description request CME.CloudPurchase.ValidationRequest Purchase details to validate executionLogger System.Action{System.String} Delegate for logging validation result","title":"Parameters"},{"location":"api_reference/CME.CloudPurchase/#returns","text":"Task< ValidationResponse >","title":"Returns"},{"location":"api_reference/CME.CloudPurchase/#purchasetype-enum","text":"","title":"PurchaseType enum"},{"location":"api_reference/CME.CloudPurchase/#summary","text":"Enum of types of purchase.","title":"Summary"},{"location":"api_reference/CME.CloudPurchase/#values","text":"Name Value Description Unknown 0 Unknown type Paid 1 Paid through the store Test 2 Test payment Promo 3 Promo code","title":"Values"},{"location":"api_reference/CME.CloudPurchase/#store-enum","text":"","title":"Store enum"},{"location":"api_reference/CME.CloudPurchase/#summary_1","text":"Enum of app stores","title":"Summary"},{"location":"api_reference/CME.CloudPurchase/#values_1","text":"Name Description Apple AppStore Fake For test purpose GooglePlay Google Play Store","title":"Values"},{"location":"api_reference/CME.CloudPurchase/#validationrequest-type","text":"","title":"ValidationRequest type"},{"location":"api_reference/CME.CloudPurchase/#overview_1","text":"Purchase info to validate","title":"Overview"},{"location":"api_reference/CME.CloudPurchase/#fields","text":"Name Type Description Store Store Store where the purchase was made PackageId string App Id ProductId string Product ID ReceiptData string Data with payment processing results from the store UserId string User ID Price string Price in local currency Currency string Local currency PriceUsdCents int Price in USD cents","title":"Fields"},{"location":"api_reference/CME.CloudPurchase/#validationresponse-type","text":"","title":"ValidationResponse type"},{"location":"api_reference/CME.CloudPurchase/#overview_2","text":"Details of validation result from CME Cloud Purchase cloud side","title":"Overview"},{"location":"api_reference/CME.CloudPurchase/#fields_1","text":"Name Type Description Valid bool Payment validity flag PurchaseType PurchaseType Payment type ErrorCode string Error code from the validating platform ErrorMessage string Error description from the validating platform","title":"Fields"},{"location":"user_guide/getting_started/","text":"Getting Started with CME CloudPurchase Installing CME CloudPurchase is pretty simple and consists of the following steps: Install the plug-in from the Unity Asset Store . Get the AWS Credentials . Make the first deployment . Configure access keys to the Google Developer Console. Get your AWS security credentials If you do not yet have an AWS account, we recommend following the instructions in the official user guide . If you already have an account, you can move on to getting the access keys. Generating security credentials For access keys, go to Identity and Access Management | Your Security Credentials and get an access key by following the steps below: Make your first deployment Warning Payments in the Google Play Store cannot be verified without the configuration of Google Developer Console access keys . Therefore, the verification may display an error: You are now ready to deploy your first CME CloudPurchase application. To do this, open the Unity Editor with the plug-in installed and click the Deploy button: You will most likely have to install the generated AWS access keys into the opened '.aws/credentials' file in your home directory. See the official userguide for more details. Configuring stores integrations For access keys to Google Developer Console , go to Google Play Console and follow the steps below: Set up a service account. Generate a new private key. Set up the necessary permissions for the account. See the official userguide for more information on the process of creating and setting up a service account.","title":"Getting Started"},{"location":"user_guide/getting_started/#getting-started-with-cme-cloudpurchase","text":"Installing CME CloudPurchase is pretty simple and consists of the following steps: Install the plug-in from the Unity Asset Store . Get the AWS Credentials . Make the first deployment . Configure access keys to the Google Developer Console.","title":"Getting Started with CME CloudPurchase"},{"location":"user_guide/getting_started/#get-your-aws-security-credentials","text":"If you do not yet have an AWS account, we recommend following the instructions in the official user guide . If you already have an account, you can move on to getting the access keys.","title":" Get your AWS security credentials"},{"location":"user_guide/getting_started/#generating-security-credentials","text":"For access keys, go to Identity and Access Management | Your Security Credentials and get an access key by following the steps below:","title":"Generating security credentials"},{"location":"user_guide/getting_started/#make-your-first-deployment","text":"Warning Payments in the Google Play Store cannot be verified without the configuration of Google Developer Console access keys . Therefore, the verification may display an error: You are now ready to deploy your first CME CloudPurchase application. To do this, open the Unity Editor with the plug-in installed and click the Deploy button: You will most likely have to install the generated AWS access keys into the opened '.aws/credentials' file in your home directory. See the official userguide for more details.","title":" Make your first deployment"},{"location":"user_guide/getting_started/#configuring-stores-integrations","text":"For access keys to Google Developer Console , go to Google Play Console and follow the steps below: Set up a service account. Generate a new private key. Set up the necessary permissions for the account. See the official userguide for more information on the process of creating and setting up a service account.","title":" Configuring stores integrations"},{"location":"user_guide/making_validation_requests/","text":"Making Validation Requests When installing CME CloudPurchase , you will find the file 'Assets/CME/Sample/CloudPurchaseSample.cs' in your Unity project containing examples of how to use 'CloudPurchaseClient'. The payment verification process with CME CloudPurchase is pretty straightforward. Basically it is all about creating an instance CloudPurchaseClient and using its Validate method . See the examples of usage below. method . See the examples of usage below. Using CloudPurchaseClient Example of using 'CloudPurchaseClient' to validate payments: public async Task Validate () { using ( var cloudPurchaseClient = new CloudPurchaseClient ()) // (1) { var request = new ValidationRequest // (2) { Store = Store . GooglePlay , PackageId = \"com.my.package.name\" , ProductId = \"my.product1\" , ReceiptData = \"Receipt data from store\" , UserId = \"Optional User ID in game\" , // (3) Price = 9.99 , Currency = \"USD\" , PriceUsdCents = 999 // (4) }; var response = await cloudPurchaseClient . Validate ( request ); if ( response . Valid ) // (5) { if ( response . PurchaseType != PurchaseType . Paid ) { // This is not real pay, Tester etc } } else { // See details in response.ErrorCode and response.ErrorMessage } } } Create 'CloudPurchaseClient' instance for validation. Create validation request directly. Set 'UserId' to study the logs and solve potential user problems. Warning: This is personal data, for more information see here . Set PriceUsdCents for analytics and revenue diagrams in the dashboard . It means that the purchase has been completed successfully. Unity IAP IStoreListener If you want to use 'CloudPurchaseClient' along with Unity IAP , first find the file 'Assets/CME/Sample/Extensions.cs' in your project and uncomment it. It is required to use the appropriate extension methods. For more details on working with Unity IAP , see the official userguide . Here is an example of using 'CloudPurchaseClient' with Unity IAP to validate payments: public class PurchaseProcessor : MonoBehaviour , IStoreListener { private IStoreController ? _storeController ; public void OnInitialized ( IStoreController controller , IExtensionProvider extensions ) { _storeController = controller ; } public void OnInitializeFailed ( InitializationFailureReason error ) { // Process error } public PurchaseProcessingResult ProcessPurchase ( PurchaseEventArgs purchaseEvent ) { ValidatePurchase ( purchaseEvent . purchasedProduct ); // (6) return PurchaseProcessingResult . Pending ; // (1) } public void OnPurchaseFailed ( Product product , PurchaseFailureReason failureReason ) { // Process error } private async void ValidatePurchase ( Product purchasedProduct ) { try { using ( var iapValidator = new CloudPurchaseClient ()) { var request = CreateValidationRequest ( purchasedProduct ); var response = await iapValidator . Validate ( request ); if ( response . Valid ) // (2) { if ( response . PurchaseType != PurchaseType . Paid ) { // This is not real pay, Tester etc } } else { // See details in response.ErrorCode and response.ErrorMessage } } } finally { _storeController ?. ConfirmPendingPurchase ( purchasedProduct ); // (3) } } private ValidationRequest CreateValidationRequest ( Product purchasedProduct ) { #if UNITY_ANDROID var validator = new CrossPlatformValidator ( GooglePlayTangle . Data (), AppleTangle . Data (), UnityEngine . Application . identifier ); var result = validator . Validate ( purchasedProduct . receipt ); foreach ( var purchaseReceipt in result ) { if ( purchaseReceipt is GooglePlayReceipt googlePlayReceipt ) { return googlePlayReceipt . AsValidationRequest (); // (4) } } throw new Exception ( \"Can't create validation request!\" ); #elif UNITY_IOS var validator = new CrossPlatformValidator ( GooglePlayTangle . Data (), AppleTangle . Data (), UnityEngine . Application . identifier ); var result = validator . Validate ( purchasedProduct . receipt ); return purchasedProduct . AsAppleValidationRequest (); // (5) #endif } } Still waiting for the purchase validation. Confirmation will come after validation. It means that the purchase has been completed successfully. Finally confirm the purchase. Use extension method to create ValidationRequest from GooglePlayReceipt. Use extension method to create ValidationRequest from Product. No need to wait for this request to be completed because we bring back the 'Pending' status of the purchase below.","title":"Making Validation Requests"},{"location":"user_guide/making_validation_requests/#making-validation-requests","text":"When installing CME CloudPurchase , you will find the file 'Assets/CME/Sample/CloudPurchaseSample.cs' in your Unity project containing examples of how to use 'CloudPurchaseClient'. The payment verification process with CME CloudPurchase is pretty straightforward. Basically it is all about creating an instance CloudPurchaseClient and using its Validate method . See the examples of usage below. method . See the examples of usage below.","title":"Making Validation Requests"},{"location":"user_guide/making_validation_requests/#using-cloudpurchaseclient","text":"Example of using 'CloudPurchaseClient' to validate payments: public async Task Validate () { using ( var cloudPurchaseClient = new CloudPurchaseClient ()) // (1) { var request = new ValidationRequest // (2) { Store = Store . GooglePlay , PackageId = \"com.my.package.name\" , ProductId = \"my.product1\" , ReceiptData = \"Receipt data from store\" , UserId = \"Optional User ID in game\" , // (3) Price = 9.99 , Currency = \"USD\" , PriceUsdCents = 999 // (4) }; var response = await cloudPurchaseClient . Validate ( request ); if ( response . Valid ) // (5) { if ( response . PurchaseType != PurchaseType . Paid ) { // This is not real pay, Tester etc } } else { // See details in response.ErrorCode and response.ErrorMessage } } } Create 'CloudPurchaseClient' instance for validation. Create validation request directly. Set 'UserId' to study the logs and solve potential user problems. Warning: This is personal data, for more information see here . Set PriceUsdCents for analytics and revenue diagrams in the dashboard . It means that the purchase has been completed successfully.","title":" Using CloudPurchaseClient"},{"location":"user_guide/making_validation_requests/#unity-iap-istorelistener","text":"If you want to use 'CloudPurchaseClient' along with Unity IAP , first find the file 'Assets/CME/Sample/Extensions.cs' in your project and uncomment it. It is required to use the appropriate extension methods. For more details on working with Unity IAP , see the official userguide . Here is an example of using 'CloudPurchaseClient' with Unity IAP to validate payments: public class PurchaseProcessor : MonoBehaviour , IStoreListener { private IStoreController ? _storeController ; public void OnInitialized ( IStoreController controller , IExtensionProvider extensions ) { _storeController = controller ; } public void OnInitializeFailed ( InitializationFailureReason error ) { // Process error } public PurchaseProcessingResult ProcessPurchase ( PurchaseEventArgs purchaseEvent ) { ValidatePurchase ( purchaseEvent . purchasedProduct ); // (6) return PurchaseProcessingResult . Pending ; // (1) } public void OnPurchaseFailed ( Product product , PurchaseFailureReason failureReason ) { // Process error } private async void ValidatePurchase ( Product purchasedProduct ) { try { using ( var iapValidator = new CloudPurchaseClient ()) { var request = CreateValidationRequest ( purchasedProduct ); var response = await iapValidator . Validate ( request ); if ( response . Valid ) // (2) { if ( response . PurchaseType != PurchaseType . Paid ) { // This is not real pay, Tester etc } } else { // See details in response.ErrorCode and response.ErrorMessage } } } finally { _storeController ?. ConfirmPendingPurchase ( purchasedProduct ); // (3) } } private ValidationRequest CreateValidationRequest ( Product purchasedProduct ) { #if UNITY_ANDROID var validator = new CrossPlatformValidator ( GooglePlayTangle . Data (), AppleTangle . Data (), UnityEngine . Application . identifier ); var result = validator . Validate ( purchasedProduct . receipt ); foreach ( var purchaseReceipt in result ) { if ( purchaseReceipt is GooglePlayReceipt googlePlayReceipt ) { return googlePlayReceipt . AsValidationRequest (); // (4) } } throw new Exception ( \"Can't create validation request!\" ); #elif UNITY_IOS var validator = new CrossPlatformValidator ( GooglePlayTangle . Data (), AppleTangle . Data (), UnityEngine . Application . identifier ); var result = validator . Validate ( purchasedProduct . receipt ); return purchasedProduct . AsAppleValidationRequest (); // (5) #endif } } Still waiting for the purchase validation. Confirmation will come after validation. It means that the purchase has been completed successfully. Finally confirm the purchase. Use extension method to create ValidationRequest from GooglePlayReceipt. Use extension method to create ValidationRequest from Product. No need to wait for this request to be completed because we bring back the 'Pending' status of the purchase below.","title":" Unity IAP IStoreListener"},{"location":"user_guide/managing_cloud_environments/","text":"Managing Cloud Environments The AWS environment, its deployment, and the plug-in settings are managed directly from Unity using the Control Panel window. To open Control Panel , press 'CME -> Cloud Purchase -> Show Control Panel'. The Control Panel window will then open. Control Panel Overview Target Environment The 'Target Environment' parameter defines which environment to manage. Two environments are available: 'testing' and 'production'. Deploy / Update Deployment The 'Deploy / Update Deployment' button deploys the selected environment in AWS with the current settings or updates it if it has already been deployed. Inspection Make Test Purchase The 'Make Test Purchase' button allows you to make a test payment in the selected environment. The payment logs will be available in the console. The payment can also be seen on the dashboard . Environment Dashboard The 'Open Environment Dashboard' button opens a dashboard in Amazon CloudWatch containing information about payments in the selected environment. You can read more about dashboard features here . Configuration Edit AWS Profile The 'Edit AWS Profile' button opens the 'credentials' file, describing the credentials for AWS services. Below is an example of what credentials look like: [cme-cloud-deploy] aws_access_key_id = AKIAXXXX1XXXXXX1XX1X aws_secret_access_key = XtxJ11cL0r3211mKEKnmgWKVvjZFqtLOpZZiXxyz region = us-east-1 See the official userguide to learn more about AWS Security Credentials . And the Getting Started section will help you find out how to get them. Set / Edit Google Credentials The 'Set / Edit Google Credentials' button opens the 'GoogleCredentials.json' file describing credentials for Google API . For more information on how to create a Google service account and get credentials, see the official userguide . Danger Zone Destroy Environment Pressing the 'Destroy Environment' button will delete the selected environment along with all related data .","title":"Managing Cloud Environments"},{"location":"user_guide/managing_cloud_environments/#managing-cloud-environments","text":"The AWS environment, its deployment, and the plug-in settings are managed directly from Unity using the Control Panel window. To open Control Panel , press 'CME -> Cloud Purchase -> Show Control Panel'. The Control Panel window will then open.","title":"Managing Cloud Environments"},{"location":"user_guide/managing_cloud_environments/#control-panel-overview","text":"","title":" Control Panel Overview"},{"location":"user_guide/managing_cloud_environments/#target-environment","text":"The 'Target Environment' parameter defines which environment to manage. Two environments are available: 'testing' and 'production'.","title":" Target Environment"},{"location":"user_guide/managing_cloud_environments/#deploy-update-deployment","text":"The 'Deploy / Update Deployment' button deploys the selected environment in AWS with the current settings or updates it if it has already been deployed.","title":" Deploy / Update Deployment"},{"location":"user_guide/managing_cloud_environments/#inspection","text":"","title":"Inspection"},{"location":"user_guide/managing_cloud_environments/#make-test-purchase","text":"The 'Make Test Purchase' button allows you to make a test payment in the selected environment. The payment logs will be available in the console. The payment can also be seen on the dashboard .","title":" Make Test Purchase"},{"location":"user_guide/managing_cloud_environments/#environment-dashboard","text":"The 'Open Environment Dashboard' button opens a dashboard in Amazon CloudWatch containing information about payments in the selected environment. You can read more about dashboard features here .","title":" Environment Dashboard"},{"location":"user_guide/managing_cloud_environments/#configuration","text":"","title":"Configuration"},{"location":"user_guide/managing_cloud_environments/#edit-aws-profile","text":"The 'Edit AWS Profile' button opens the 'credentials' file, describing the credentials for AWS services. Below is an example of what credentials look like: [cme-cloud-deploy] aws_access_key_id = AKIAXXXX1XXXXXX1XX1X aws_secret_access_key = XtxJ11cL0r3211mKEKnmgWKVvjZFqtLOpZZiXxyz region = us-east-1 See the official userguide to learn more about AWS Security Credentials . And the Getting Started section will help you find out how to get them.","title":" Edit AWS Profile"},{"location":"user_guide/managing_cloud_environments/#set-edit-google-credentials","text":"The 'Set / Edit Google Credentials' button opens the 'GoogleCredentials.json' file describing credentials for Google API . For more information on how to create a Google service account and get credentials, see the official userguide .","title":" Set / Edit Google Credentials"},{"location":"user_guide/managing_cloud_environments/#danger-zone","text":"","title":"Danger Zone"},{"location":"user_guide/managing_cloud_environments/#destroy-environment","text":"Pressing the 'Destroy Environment' button will delete the selected environment along with all related data .","title":" Destroy Environment"},{"location":"user_guide/usage_statistics/","text":"Usage Statistics & Monitoring Basic payment monitoring is available through AWS CloudWatch, and you can use CSV uploaded history to perform full-featured analysis with the tools of your choice. Dashboard overview To access the dashboard, press the 'Open Environment Dashboard' button. By default, the dashboard contains the following sections: 'Purchase Overview'. Shows the amount of payments by day. 'Usage Overview'. The graph shows the number of successful payments and those with an error. 'Purchase Details'. Here you can read more about each specific payment. 'Purchase Errors'. Details of payment errors. The dashboard controls are in the top right-hand corner. These can be used to: Change the reviewed period. Change the data update interval. Add widgets to dashboard, change its name, delete it, etc. For more details on working with dashboards in CloudWatch, see the official userguide . Sensetive data Warning The payment log includes the user's personal data, namely the UserId field. The default period for retaining personal data is two weeks. Exporting to the '.csv' With CloudWatch, you can export data from the widget to a '.csv' file. To do this, you need to: Select a relevant widget. Press the 'View in CloudWatch Logs Insights' button. Press the 'Run query' button. Wait until the download is completed. Select 'Download table (CSV)' from the 'Export results' menu.","title":"Usage Statistics & Monitoring"},{"location":"user_guide/usage_statistics/#usage-statistics-monitoring","text":"Basic payment monitoring is available through AWS CloudWatch, and you can use CSV uploaded history to perform full-featured analysis with the tools of your choice.","title":"Usage Statistics &amp; Monitoring"},{"location":"user_guide/usage_statistics/#dashboard-overview","text":"To access the dashboard, press the 'Open Environment Dashboard' button. By default, the dashboard contains the following sections: 'Purchase Overview'. Shows the amount of payments by day. 'Usage Overview'. The graph shows the number of successful payments and those with an error. 'Purchase Details'. Here you can read more about each specific payment. 'Purchase Errors'. Details of payment errors. The dashboard controls are in the top right-hand corner. These can be used to: Change the reviewed period. Change the data update interval. Add widgets to dashboard, change its name, delete it, etc. For more details on working with dashboards in CloudWatch, see the official userguide .","title":" Dashboard overview"},{"location":"user_guide/usage_statistics/#sensetive-data","text":"Warning The payment log includes the user's personal data, namely the UserId field. The default period for retaining personal data is two weeks.","title":" Sensetive data"},{"location":"user_guide/usage_statistics/#exporting-to-the-csv","text":"With CloudWatch, you can export data from the widget to a '.csv' file. To do this, you need to: Select a relevant widget. Press the 'View in CloudWatch Logs Insights' button. Press the 'Run query' button. Wait until the download is completed. Select 'Download table (CSV)' from the 'Export results' menu.","title":" Exporting to the '.csv'"}]}